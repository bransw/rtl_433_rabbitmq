#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–¥–µ–∫–æ–≤ RTL_433.

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Å–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫–æ–¥–µ–∫–æ–≤ –∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç
–∏—Ö –¥–∏–Ω–∞–º–∏—á–µ—Å–∫—É—é –∑–∞–≥—Ä—É–∑–∫—É –±–µ–∑ –ø–µ—Ä–µ–∫–æ–º–ø–∏–ª—è—Ü–∏–∏.
"""

import os
import json
import time
import subprocess
import tempfile
import shutil

def create_test_devices_dir():
    """–°–æ–∑–¥–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –∫–æ–¥–µ–∫–∞–º–∏."""
    test_dir = tempfile.mkdtemp(prefix="rtl433_test_devices_")
    print(f"–°–æ–∑–¥–∞–Ω–∞ —Ç–µ—Å—Ç–æ–≤–∞—è –ø–∞–ø–∫–∞: {test_dir}")
    
    # –¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–¥–µ–∫ 1: JSON —Ñ–æ—Ä–º–∞—Ç
    device1 = {
        "name": "TestTempSensor",
        "modulation": "OOK_PWM",
        "description": "–¢–µ—Å—Ç–æ–≤—ã–π –¥–∞—Ç—á–∏–∫ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã",
        "flex_spec": "n=TestTempSensor,m=OOK_PWM,s=100,l=200,r=2000,g=400,t=50",
        "enabled": True,
        "priority": 0
    }
    
    with open(os.path.join(test_dir, "temp_sensor.json"), "w") as f:
        json.dump(device1, f, indent=2, ensure_ascii=False)
    
    # –¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–¥–µ–∫ 2: INI —Ñ–æ—Ä–º–∞—Ç  
    device2_ini = """# –¢–µ—Å—Ç–æ–≤—ã–π –¥–∞—Ç—á–∏–∫ –¥–≤–∏–∂–µ–Ω–∏—è
name=TestMotionSensor
modulation=OOK_PCM
description=–¢–µ—Å—Ç–æ–≤—ã–π –¥–∞—Ç—á–∏–∫ –¥–≤–∏–∂–µ–Ω–∏—è —Å OOK PCM
flex_spec=n=TestMotionSensor,m=OOK_PCM,s=50,l=100,r=1500,g=200
enabled=true
priority=1
"""
    
    with open(os.path.join(test_dir, "motion_sensor.ini"), "w") as f:
        f.write(device2_ini)
    
    # –¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–¥–µ–∫ 3: CONF —Ñ–æ—Ä–º–∞—Ç
    device3_conf = """# –¢–µ—Å—Ç–æ–≤–∞—è –º–µ—Ç–µ–æ—Å—Ç–∞–Ω—Ü–∏—è
name=TestWeatherStation
modulation=FSK_PCM
description=–¢–µ—Å—Ç–æ–≤–∞—è –º–µ—Ç–µ–æ—Å—Ç–∞–Ω—Ü–∏—è 433MHz
flex_spec=n=TestWeatherStation,m=FSK_PCM,s=52,l=52,r=800
enabled=true
priority=0
"""
    
    with open(os.path.join(test_dir, "weather_station.conf"), "w") as f:
        f.write(device3_conf)
    
    return test_dir

def test_device_listing(rtl433_binary, devices_dir):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∫–æ–¥–µ–∫–æ–≤."""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –∫–æ–¥–µ–∫–æ–≤...")
    
    try:
        result = subprocess.run([
            rtl433_binary, "-L", devices_dir
        ], capture_output=True, text=True, timeout=10)
        
        print("–í—ã–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã:")
        print(result.stdout)
        
        if result.stderr:
            print("–û—à–∏–±–∫–∏:")
            print(result.stderr)
            
        return result.returncode == 0
        
    except subprocess.TimeoutExpired:
        print("‚ùå –¢–∞–π–º-–∞—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã")
        return False
    except FileNotFoundError:
        print(f"‚ùå –§–∞–π–ª {rtl433_binary} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False

def test_device_loading(rtl433_binary, devices_dir):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –∫–æ–¥–µ–∫–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞."""
    print("\nüìÇ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ñ–∞–π–ª–∞...")
    
    json_file = os.path.join(devices_dir, "temp_sensor.json")
    
    try:
        result = subprocess.run([
            rtl433_binary, "-J", json_file, "-L"
        ], capture_output=True, text=True, timeout=10)
        
        print("–†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–≥—Ä—É–∑–∫–∏:")
        print(result.stdout)
        
        return "TestTempSensor" in result.stdout
        
    except subprocess.TimeoutExpired:
        print("‚ùå –¢–∞–π–º-–∞—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã")
        return False

def test_hot_reload(rtl433_binary, devices_dir):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≥–æ—Ä—è—á—É—é –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É –∫–æ–¥–µ–∫–æ–≤."""
    print("\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–æ—Ä—è—á–µ–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏...")
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–¥–µ–∫ –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    new_device = {
        "name": "HotReloadDevice",
        "modulation": "OOK_PPM",
        "description": "–ö–æ–¥–µ–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥–æ—Ä—è—á–µ–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏",
        "flex_spec": "n=HotReloadDevice,m=OOK_PPM,s=136,l=248,r=2000",
        "enabled": True,
        "priority": 2
    }
    
    new_file = os.path.join(devices_dir, "hot_reload_test.json")
    
    # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ
    time.sleep(1)
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª
    with open(new_file, "w") as f:
        json.dump(new_device, f, indent=2, ensure_ascii=False)
    
    print(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª –∫–æ–¥–µ–∫–∞: {new_file}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—è–≤–∏–ª—Å—è –ª–∏ –Ω–æ–≤—ã–π –∫–æ–¥–µ–∫
    time.sleep(1)
    
    try:
        result = subprocess.run([
            rtl433_binary, "-L", devices_dir
        ], capture_output=True, text=True, timeout=10)
        
        return "HotReloadDevice" in result.stdout
        
    except subprocess.TimeoutExpired:
        print("‚ùå –¢–∞–π–º-–∞—É—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏")
        return False

def test_format_validation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π."""
    print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–æ—Ä–º–∞—Ç–æ–≤...")
    
    # –¢–µ—Å—Ç –≤–∞–ª–∏–¥–Ω–æ–≥–æ JSON
    valid_json = {
        "name": "ValidDevice",
        "modulation": "OOK_PWM",
        "flex_spec": "n=ValidDevice,m=OOK_PWM,s=100,l=200,r=2000",
        "enabled": True
    }
    
    # –¢–µ—Å—Ç –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ JSON (–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ)
    invalid_json = {
        "name": "InvalidDevice",
        "description": "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç flex_spec"
    }
    
    print("‚úÖ –í–∞–ª–∏–¥–Ω—ã–π JSON:", json.dumps(valid_json, ensure_ascii=False))
    print("‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON:", json.dumps(invalid_json, ensure_ascii=False))
    
    return True

def run_integration_test(rtl433_binary):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—ã–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç."""
    print("üöÄ –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ —Å–∏—Å—Ç–µ–º—ã –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–∏")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –ø–∞–ø–∫—É —Å –∫–æ–¥–µ–∫–∞–º–∏
    devices_dir = create_test_devices_dir()
    
    try:
        tests_passed = 0
        total_tests = 4
        
        # –¢–µ—Å—Ç 1: –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–¥–µ–∫–æ–≤
        if test_device_listing(rtl433_binary, devices_dir):
            print("‚úÖ –¢–µ—Å—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–¥–µ–∫–æ–≤ –ø—Ä–æ–π–¥–µ–Ω")
            tests_passed += 1
        else:
            print("‚ùå –¢–µ—Å—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–¥–µ–∫–æ–≤ –ø—Ä–æ–≤–∞–ª–µ–Ω")
        
        # –¢–µ—Å—Ç 2: –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ —Ñ–∞–π–ª–∞
        if test_device_loading(rtl433_binary, devices_dir):
            print("‚úÖ –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞ –ø—Ä–æ–π–¥–µ–Ω")
            tests_passed += 1
        else:
            print("‚ùå –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞ –ø—Ä–æ–≤–∞–ª–µ–Ω")
        
        # –¢–µ—Å—Ç 3: –ì–æ—Ä—è—á–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞
        if test_hot_reload(rtl433_binary, devices_dir):
            print("‚úÖ –¢–µ—Å—Ç –≥–æ—Ä—è—á–µ–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–π–¥–µ–Ω")
            tests_passed += 1
        else:
            print("‚ùå –¢–µ—Å—Ç –≥–æ—Ä—è—á–µ–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–≤–∞–ª–µ–Ω")
        
        # –¢–µ—Å—Ç 4: –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–æ–≤
        if test_format_validation():
            print("‚úÖ –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–æ—Ä–º–∞—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω")
            tests_passed += 1
        else:
            print("‚ùå –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–æ—Ä–º–∞—Ç–æ–≤ –ø—Ä–æ–≤–∞–ª–µ–Ω")
        
        print("\n" + "=" * 60)
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {tests_passed}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
        
        if tests_passed == total_tests:
            print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω—ã!")
            return True
        else:
            print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã")
            return False
    
    finally:
        # –û—á–∏—Å—Ç–∫–∞
        print(f"\nüßπ –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –ø–∞–ø–∫–∏: {devices_dir}")
        shutil.rmtree(devices_dir)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    import argparse
    
    parser = argparse.ArgumentParser(
        description="–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–¥–µ–∫–æ–≤ RTL_433"
    )
    parser.add_argument(
        "--binary", "-b", 
        default="./rtl_433_dynamic",
        help="–ü—É—Ç—å –∫ –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–º—É —Ñ–∞–π–ª—É rtl_433_dynamic"
    )
    parser.add_argument(
        "--create-examples", "-c",
        action="store_true",
        help="–°–æ–∑–¥–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –≤ —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–µ"
    )
    
    args = parser.parse_args()
    
    if args.create_examples:
        print("üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–æ–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π...")
        
        os.makedirs("devices", exist_ok=True)
        
        # –ü—Ä–∏–º–µ—Ä —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω–æ–≥–æ –¥–∞—Ç—á–∏–∫–∞
        temp_sensor = {
            "name": "ExampleTempSensor",
            "modulation": "OOK_PWM",
            "description": "–ü—Ä–∏–º–µ—Ä –¥–∞—Ç—á–∏–∫–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã",
            "flex_spec": "n=ExampleTempSensor,m=OOK_PWM,s=100,l=200,r=2000,g=400,t=50",
            "enabled": True,
            "priority": 0
        }
        
        with open("devices/example_temp_sensor.json", "w") as f:
            json.dump(temp_sensor, f, indent=2, ensure_ascii=False)
        
        # –ü—Ä–∏–º–µ—Ä –¥–∞—Ç—á–∏–∫–∞ –¥–≤–∏–∂–µ–Ω–∏—è (INI)
        motion_ini = """# –ü—Ä–∏–º–µ—Ä –¥–∞—Ç—á–∏–∫–∞ –¥–≤–∏–∂–µ–Ω–∏—è
name=ExampleMotionSensor
modulation=OOK_PCM
description=–ü—Ä–∏–º–µ—Ä –¥–∞—Ç—á–∏–∫–∞ –¥–≤–∏–∂–µ–Ω–∏—è
flex_spec=n=ExampleMotionSensor,m=OOK_PCM,s=50,l=100,r=1500,g=200
enabled=true
priority=1
"""
        
        with open("devices/example_motion_sensor.ini", "w") as f:
            f.write(motion_ini)
        
        print("‚úÖ –ü—Ä–∏–º–µ—Ä—ã —Å–æ–∑–¥–∞–Ω—ã –≤ –ø–∞–ø–∫–µ ./devices/")
        print("–ó–∞–ø—É—Å–∫: ./rtl_433_dynamic -D ./devices -L")
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –±–∏–Ω–∞—Ä–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    if not os.path.exists(args.binary):
        print(f"‚ùå –ë–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {args.binary}")
        print("–î–ª—è –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:")
        print("gcc -o rtl_433_dynamic src/rtl_433_dynamic.c src/dynamic_device_loader.c -I./include -lm")
        return False
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    success = run_integration_test(args.binary)
    
    if success:
        print("\nüéØ –°–∏—Å—Ç–µ–º–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        print("\n–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:")
        print(f"  {args.binary} -D ./devices  # –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –ø–∞–ø–∫–∏")
        print(f"  {args.binary} -L            # –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–¥–µ–∫–∏")
        print(f"  {args.binary} -J file.json  # –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª")
    else:
        print("\n‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ —Å–∏—Å—Ç–µ–º–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–∏")
    
    return success

if __name__ == "__main__":
    exit(0 if main() else 1)
