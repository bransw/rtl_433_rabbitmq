[33m383c2488[m[33m ([m[1;36mHEAD -> [m[1;32mRtl_433_remote[m[33m)[m fix: Improve SDR signal processing with rtl_433-compatible logic\n\nAdded key improvements to match original rtl_433 behavior:\n- Added cfg->watchdog++ for proper timing\n- Fixed pulse_detect_package to use cfg->input_pos instead of 0\n- Added frame tracking with start_ago and end_ago\n- Implemented process_frame control variable\n- Added cfg->input_pos updates after buffer processing\n\nResults:\n- More diverse signal characteristics (18 vs 20 pulses)\n- Realistic RSSI/SNR values (-3.6 dB / 22.8 dB)\n- Proper package limiting prevents infinite loops\n\nRemaining issue: Still sends identical signals - need pulse detector state reset between buffers
[33m6a493a62[m fix: Prevent infinite loop in SDR mode pulse detection\n\nRESOLVED: Client sends same message in loop in SDR mode\n\nProblem:\n- pulse_detect_package() was finding same signal repeatedly in buffer\n- while(package_type) loop never terminated\n- Same FSK signal sent infinitely (23 pulses repeatedly)\n- Client consumed 100% CPU and flooded RabbitMQ queue\n\nSolution:\n- Added packages_in_buffer counter to limit processing per buffer\n- Maximum 10 packages per buffer prevents infinite loops\n- Added warning when limit reached for diagnostics\n- Maintains compatibility with legitimate multi-package buffers\n\nResults:\n- SDR mode now processes controlled number of signals\n- Proper termination and statistics (40 signals/min vs infinite)\n- CPU usage normalized\n- Queue flooding eliminated\n\nTesting confirmed: 10 signals in 15 seconds, clean shutdown
[33me7e7e169[m fix: Complete RabbitMQ consumer continuous processing solution
[33m4cee6b4a[m fix: Implement batch message processing to resolve single-message limitation
[33mdb113586[m docs: Add comprehensive RabbitMQ error handling documentation
