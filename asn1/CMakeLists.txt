# CMakeLists.txt for ASN.1 library - Fully Automated
# This CMakeLists.txt automatically handles ASN.1 code generation without manual steps

cmake_minimum_required(VERSION 3.10)
project(rtl433_asn1 C)
set(CMAKE_C_STANDARD 99)

# Automatic asn1c detection and installation helper
function(check_and_install_asn1c)
    # First, try to find asn1c
    find_program(ASN1C_EXECUTABLE asn1c)
    
    if(NOT ASN1C_EXECUTABLE)
        message(STATUS "asn1c not found, attempting automatic setup...")
        
        # Try to run our setup script
        if(WIN32)
            set(SETUP_SCRIPT "${CMAKE_CURRENT_SOURCE_DIR}/setup_asn1.bat")
            if(EXISTS ${SETUP_SCRIPT})
                message(STATUS "Running Windows setup script...")
                execute_process(
                    COMMAND cmd /c "${SETUP_SCRIPT}" --install-only
                    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
                    RESULT_VARIABLE SETUP_RESULT
                )
            endif()
        else()
            set(SETUP_SCRIPT "${CMAKE_CURRENT_SOURCE_DIR}/setup_asn1.sh")
            if(EXISTS ${SETUP_SCRIPT})
                message(STATUS "Running Unix setup script...")
                execute_process(
                    COMMAND bash "${SETUP_SCRIPT}" --install-only
                    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
                    RESULT_VARIABLE SETUP_RESULT
                )
            endif()
        endif()
        
        # Try to find asn1c again after setup
        find_program(ASN1C_EXECUTABLE asn1c)
        
        if(NOT ASN1C_EXECUTABLE)
            message(FATAL_ERROR 
                "asn1c compiler not found and automatic installation failed.\n"
                "Please install asn1c manually:\n"
                "  Ubuntu/Debian: sudo apt-get install asn1c\n"
                "  CentOS/RHEL: sudo yum install asn1c\n"
                "  macOS: brew install asn1c\n"
                "  Windows: Use vcpkg install asn1c or WSL\n"
                "  From source: https://github.com/vlm/asn1c"
            )
        else()
            message(STATUS "asn1c found after automatic setup: ${ASN1C_EXECUTABLE}")
        endif()
    else()
        message(STATUS "asn1c found: ${ASN1C_EXECUTABLE}")
    endif()
endfunction()

# Check and install asn1c if needed
check_and_install_asn1c()

# Set ASN.1 generation directory and schema file
set(ASN1_GENERATED_DIR "${CMAKE_CURRENT_BINARY_DIR}/asn1-generated")
set(ASN1_SCHEMA_FILE "${CMAKE_CURRENT_SOURCE_DIR}/rtl433-rabbitmq.asn1")

# Validate schema file exists
if(NOT EXISTS ${ASN1_SCHEMA_FILE})
    message(FATAL_ERROR "ASN.1 schema file not found: ${ASN1_SCHEMA_FILE}")
endif()

# Create output directory
file(MAKE_DIRECTORY ${ASN1_GENERATED_DIR})

# Use GLOB to include all generated C files after generation
# This is simpler and more reliable than parsing Makefiles
add_custom_target(asn1_collect_sources
    COMMAND ${CMAKE_COMMAND} -E echo "Collecting all generated ASN.1 C files"
    DEPENDS ${ASN1_GENERATED_DIR}/RTL433Message.c
)

# CRITICAL FIX: GLOB doesn't work with non-existent files during configure
# We need to explicitly list all ASN.1 sources that asn1c will generate
# This list is based on the Makefile.am.libasncodec that asn1c creates

# Core ASN.1 runtime sources (always generated by asn1c)
set(ASN1_RUNTIME_SOURCES
    ${ASN1_GENERATED_DIR}/asn_application.c
    ${ASN1_GENERATED_DIR}/asn_bit_data.c
    ${ASN1_GENERATED_DIR}/asn_codecs_prim.c
    ${ASN1_GENERATED_DIR}/asn_internal.c
    ${ASN1_GENERATED_DIR}/asn_random_fill.c
    ${ASN1_GENERATED_DIR}/asn_SEQUENCE_OF.c
    ${ASN1_GENERATED_DIR}/asn_SET_OF.c
    ${ASN1_GENERATED_DIR}/ber_decoder.c
    ${ASN1_GENERATED_DIR}/ber_tlv_length.c
    ${ASN1_GENERATED_DIR}/ber_tlv_tag.c
    ${ASN1_GENERATED_DIR}/constr_CHOICE.c
    ${ASN1_GENERATED_DIR}/constr_CHOICE_oer.c
    ${ASN1_GENERATED_DIR}/constr_SEQUENCE.c
    ${ASN1_GENERATED_DIR}/constr_SEQUENCE_oer.c
    ${ASN1_GENERATED_DIR}/constr_SEQUENCE_OF.c
    ${ASN1_GENERATED_DIR}/constr_SET_OF.c
    ${ASN1_GENERATED_DIR}/constr_SET_OF_oer.c
    ${ASN1_GENERATED_DIR}/constr_TYPE.c
    ${ASN1_GENERATED_DIR}/constraints.c
    ${ASN1_GENERATED_DIR}/der_encoder.c
    ${ASN1_GENERATED_DIR}/oer_decoder.c
    ${ASN1_GENERATED_DIR}/oer_encoder.c
    ${ASN1_GENERATED_DIR}/oer_support.c
    ${ASN1_GENERATED_DIR}/per_decoder.c
    ${ASN1_GENERATED_DIR}/per_encoder.c
    ${ASN1_GENERATED_DIR}/per_opentype.c
    ${ASN1_GENERATED_DIR}/per_support.c
    ${ASN1_GENERATED_DIR}/xer_decoder.c
    ${ASN1_GENERATED_DIR}/xer_encoder.c
    ${ASN1_GENERATED_DIR}/xer_support.c
)

# Basic ASN.1 types (always generated)
set(ASN1_BASIC_TYPES
    ${ASN1_GENERATED_DIR}/BIT_STRING.c
    ${ASN1_GENERATED_DIR}/BOOLEAN.c
    ${ASN1_GENERATED_DIR}/INTEGER.c
    ${ASN1_GENERATED_DIR}/INTEGER_oer.c
    ${ASN1_GENERATED_DIR}/NativeEnumerated.c
    ${ASN1_GENERATED_DIR}/NativeEnumerated_oer.c
    ${ASN1_GENERATED_DIR}/NativeInteger.c
    ${ASN1_GENERATED_DIR}/NativeInteger_oer.c
    ${ASN1_GENERATED_DIR}/NativeReal.c
    ${ASN1_GENERATED_DIR}/OCTET_STRING.c
    ${ASN1_GENERATED_DIR}/OCTET_STRING_oer.c
    ${ASN1_GENERATED_DIR}/OPEN_TYPE.c
    ${ASN1_GENERATED_DIR}/OPEN_TYPE_oer.c
    ${ASN1_GENERATED_DIR}/REAL.c
    ${ASN1_GENERATED_DIR}/UTF8String.c
    ${ASN1_GENERATED_DIR}/GeneralizedTime.c
)

# Our protocol-specific message types (from our ASN.1 schema)
set(ASN1_MESSAGE_SOURCES
    ${ASN1_GENERATED_DIR}/RTL433Message.c
    ${ASN1_GENERATED_DIR}/SignalMessage.c
    ${ASN1_GENERATED_DIR}/SignalData.c
    ${ASN1_GENERATED_DIR}/PulsesData.c
    ${ASN1_GENERATED_DIR}/ModulationType.c
    ${ASN1_GENERATED_DIR}/RFParameters.c
    ${ASN1_GENERATED_DIR}/SignalQuality.c
    ${ASN1_GENERATED_DIR}/TimingInfo.c
    ${ASN1_GENERATED_DIR}/DetectedMessage.c
    ${ASN1_GENERATED_DIR}/DeviceInfo.c
    ${ASN1_GENERATED_DIR}/DeviceData.c
    ${ASN1_GENERATED_DIR}/DeviceDataField.c
    ${ASN1_GENERATED_DIR}/DeviceFieldValue.c
    ${ASN1_GENERATED_DIR}/DetectionMetadata.c
    ${ASN1_GENERATED_DIR}/StatusMessage.c
    ${ASN1_GENERATED_DIR}/SystemStatus.c
    ${ASN1_GENERATED_DIR}/SystemStatistics.c
    ${ASN1_GENERATED_DIR}/ErrorInfo.c
    ${ASN1_GENERATED_DIR}/ErrorSeverity.c
    ${ASN1_GENERATED_DIR}/ConfigMessage.c
    ${ASN1_GENERATED_DIR}/ConfigAction.c
    ${ASN1_GENERATED_DIR}/ConfigData.c
    ${ASN1_GENERATED_DIR}/DeviceConfig.c
    ${ASN1_GENERATED_DIR}/ConfigParameter.c
    ${ASN1_GENERATED_DIR}/SystemSettings.c
    ${ASN1_GENERATED_DIR}/FilterSettings.c
    ${ASN1_GENERATED_DIR}/FrequencyRange.c
)

# Combine all sources for the library (matches asn1c Makefile.am.libasncodec)
set(ASN1_ALL_SOURCES 
    ${ASN1_RUNTIME_SOURCES}
    ${ASN1_BASIC_TYPES}
    ${ASN1_MESSAGE_SOURCES}
)

# Note: converter-example.c and pdu_collection.c are NOT included (they're executables)
list(LENGTH ASN1_ALL_SOURCES ASN1_SOURCES_COUNT)
message(STATUS "ASN.1: Configured ${ASN1_SOURCES_COUNT} source files (explicit list from asn1c pattern)")

message(STATUS "ASN.1 sources count: ${ASN1_ALL_SOURCES}")

# Enhanced ASN.1 code generation with validation and error handling
add_custom_command(
    OUTPUT ${ASN1_GENERATED_DIR}/RTL433Message.c
    COMMAND ${CMAKE_COMMAND} -E make_directory ${ASN1_GENERATED_DIR}
    COMMAND ${CMAKE_COMMAND} -E echo "Validating ASN.1 schema: ${ASN1_SCHEMA_FILE}"
    COMMAND ${ASN1C_EXECUTABLE} -E ${ASN1_SCHEMA_FILE}
    COMMAND ${CMAKE_COMMAND} -E echo "Generating ASN.1 C code..."
    COMMAND ${ASN1C_EXECUTABLE}
        -fcompound-names 
        -fincludes-quoted 
        -fno-include-deps
        -pdu=all
        -gen-PER
        -gen-OER
        -D ${ASN1_GENERATED_DIR}
        ${ASN1_SCHEMA_FILE}
    COMMAND ${CMAKE_COMMAND} -E echo "ASN.1 code generation completed successfully"
    DEPENDS ${ASN1_SCHEMA_FILE}
    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
    COMMENT "Generating and validating ASN1 C code from schema"
    VERBATIM
)

# Create ASN.1 generation target with validation
add_custom_target(asn1_generate
    DEPENDS ${ASN1_GENERATED_DIR}/RTL433Message.c
)

# Add target to validate ASN.1 schema only
add_custom_target(asn1_validate
    COMMAND ${ASN1C_EXECUTABLE} -E ${ASN1_SCHEMA_FILE}
    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
    COMMENT "Validating ASN.1 schema"
)

# Add target to clean generated files
add_custom_target(asn1_clean
    COMMAND ${CMAKE_COMMAND} -E remove_directory ${ASN1_GENERATED_DIR}
    COMMAND ${CMAKE_COMMAND} -E make_directory ${ASN1_GENERATED_DIR}
    COMMENT "Cleaning ASN.1 generated files"
)

# Add target to show generation statistics
add_custom_target(asn1_stats
    COMMAND ${CMAKE_COMMAND} -E echo "ASN.1 Generation Statistics:"
    COMMAND ${CMAKE_COMMAND} -E echo "  Schema file: ${ASN1_SCHEMA_FILE}"
    COMMAND ${CMAKE_COMMAND} -E echo "  Generated directory: ${ASN1_GENERATED_DIR}"
    DEPENDS ${ASN1_GENERATED_DIR}/RTL433Message.c
    COMMENT "Showing ASN.1 generation statistics"
)

# Create static library with all generated C files
add_library(r_asn1 STATIC ${ASN1_ALL_SOURCES})

# CRITICAL: Make sure ASN.1 code is generated before building library
add_dependencies(r_asn1 asn1_generate)

# Mark all source files as GENERATED to avoid CMake warnings
set_source_files_properties(${ASN1_ALL_SOURCES} PROPERTIES GENERATED TRUE)

# Include directories
target_include_directories(r_asn1 PUBLIC
    ${ASN1_GENERATED_DIR}
    ${CMAKE_CURRENT_SOURCE_DIR}
)

# Compiler flags for ASN.1 library
target_compile_options(r_asn1 PRIVATE
    -Wall
    -Wextra
    -Wno-unused-parameter
    -Wno-unused-function
    -Wno-missing-field-initializers
)

# Variables are exported by parent CMakeLists.txt

# Install library
install(TARGETS r_asn1 
    ARCHIVE DESTINATION lib
    LIBRARY DESTINATION lib
)

# Install headers
install(DIRECTORY ${ASN1_GENERATED_DIR}/
    DESTINATION include/rtl433/asn1
    FILES_MATCHING PATTERN "*.h"
)

# Status messages are handled by parent CMakeLists.txt
